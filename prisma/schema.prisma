generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum NotificationType {
  GENERAL
  OFFER
  UPDATES
}

model book {
  id           String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  book_type_id String?       @db.Uuid
  description  String?
  reference    String?       @db.VarChar(255)
  user_id      String?       @db.Uuid
  created_at   DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at   DateTime?     @default(now()) @db.Timestamptz(6)
  book_type    book_type?    @relation(fields: [book_type_id], references: [id], onDelete: Restrict, onUpdate: NoAction)
  users        users?        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  book_export  book_export[]
  items        items[]
  costs        costs[]
  invoices     invoices[]

  @@index([book_type_id], map: "idx_book_book_type_id")
  @@index([user_id], map: "idx_book_user_id")
}

model book_export {
  id              String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  book_id         String?   @db.Uuid
  file_path       String?   @db.VarChar(500)
  authority_email String?   @db.VarChar(255)
  export_url      String?
  export_url_slug String?   @db.VarChar(255)
  exported_by     String?   @db.Uuid
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  updated_at      DateTime? @default(now()) @db.Timestamptz(6)
  book            book?     @relation(fields: [book_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users           users?    @relation(fields: [exported_by], references: [id], onUpdate: NoAction)
}

model book_type {
  id                String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name              String              @db.VarChar(100)
  display_name      String?             @db.VarChar(255)
  description       String?
  created_at        DateTime?           @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?           @default(now()) @db.Timestamptz(6)
  book              book[]
  field_definitions field_definitions[]
}

model category {
  id                 String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id            String?    @db.Uuid
  parent_category_id String?    @db.Uuid
  name               String     @db.VarChar(100)
  created_at         DateTime?  @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?  @default(now()) @db.Timestamptz(6)
  category           category?  @relation("categoryTocategory", fields: [parent_category_id], references: [id], onUpdate: NoAction)
  other_category     category[] @relation("categoryTocategory")
  users              users?     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  items              items[]
}

model costs {
  id                  String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id             String?           @db.Uuid
  book_id             String?           @db.Uuid
  costs_event_type_id String?           @db.Uuid
  amount              Decimal           @db.Decimal(10, 2)
  details_message     String?
  date                DateTime          @db.Date
  created_at          DateTime?         @default(now()) @db.Timestamptz(6)
  costs_event_type    costs_event_type? @relation(fields: [costs_event_type_id], references: [id], onDelete: Restrict, onUpdate: NoAction)
  users               users?            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  book                book?             @relation(fields: [book_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id], map: "idx_costs_user_id")
  @@index([book_id], map: "idx_costs_book_id")
}

model costs_event_type {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id    String?   @db.Uuid
  name       String    @db.VarChar(100)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  costs      costs[]
  users      users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

// Centralized document type management
model document_types {
  id          String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String      @unique @db.VarChar(100) // "item", "incident", "user", "person", "book", etc.
  description String?
  created_at  DateTime?   @default(now()) @db.Timestamptz(6)
  updated_at  DateTime?   @default(now()) @db.Timestamptz(6)
  documents   documents[]

  @@index([name], map: "idx_document_types_name")
}

// Centralized documents table with polymorphic relationships
model documents {
  id               String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  document_type_id String    @db.Uuid
  entity_type      String    @db.VarChar(50) // "item", "incident", "user", "person", "book", etc.
  entity_id        String    @db.Uuid // UUID of the related entity
  title            String    @db.VarChar(255)
  original_name    String    @db.VarChar(255) // Original filename
  file_name        String    @db.VarChar(255) // Stored filename
  file_path        String    @db.VarChar(500) // Storage path
  file_size        BigInt? // File size in bytes
  mime_type        String?   @db.VarChar(100)
  storage_provider String?   @db.VarChar(50) // "s3", "local", "supabase", etc.
  storage_url      String?   @db.VarChar(500) // Public URL if available
  description      String?
  issued_by        String?   @db.VarChar(255)
  issued_date      DateTime? @db.Date
  document_number  String?   @db.VarChar(100)
  expiry_date      DateTime? @db.Date
  is_deleted       Boolean   @default(false) // Soft delete
  deleted_at       DateTime? @db.Timestamptz(6)
  created_at       DateTime? @default(now()) @db.Timestamptz(6)
  updated_at       DateTime? @default(now()) @db.Timestamptz(6)

  document_type document_types @relation(fields: [document_type_id], references: [id], onDelete: Restrict, onUpdate: NoAction)

  @@index([document_type_id], map: "idx_documents_type_id")
  @@index([entity_type, entity_id], map: "idx_documents_entity")
  @@index([is_deleted], map: "idx_documents_deleted")
  @@index([expiry_date], map: "idx_documents_expiry")
}

// Centralized image type management
model image_types {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String    @unique @db.VarChar(100) // "item", "incident", "profile", "document_preview", etc.
  description String?
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)
  images      images[]

  @@index([name], map: "idx_image_types_name")
}

// Centralized images table with polymorphic relationships
model images {
  id               String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  image_type_id    String    @db.Uuid
  entity_type      String    @db.VarChar(50) // "item", "incident", "user", "person", etc.
  entity_id        String    @db.Uuid // UUID of the related entity
  title            String?   @db.VarChar(255)
  original_name    String    @db.VarChar(255) // Original filename
  file_name        String    @db.VarChar(255) // Stored filename
  file_path        String    @db.VarChar(500) // Storage path
  file_size        BigInt? // File size in bytes
  mime_type        String?   @db.VarChar(100)
  storage_provider String?   @db.VarChar(50) // "s3", "local", "supabase", etc.
  storage_url      String?   @db.VarChar(500) // Public URL if available
  width            Int? // Image width in pixels
  height           Int? // Image height in pixels
  alt_text         String?   @db.VarChar(500) // Accessibility alt text
  is_primary       Boolean   @default(false) // Primary image for entity
  position         Int?      @default(0) // Display order
  is_deleted       Boolean   @default(false) // Soft delete
  deleted_at       DateTime? @db.Timestamptz(6)
  created_at       DateTime? @default(now()) @db.Timestamptz(6)
  updated_at       DateTime? @default(now()) @db.Timestamptz(6)

  image_type image_types @relation(fields: [image_type_id], references: [id], onDelete: Restrict, onUpdate: NoAction)

  @@index([image_type_id], map: "idx_images_type_id")
  @@index([entity_type, entity_id], map: "idx_images_entity")
  @@index([is_deleted], map: "idx_images_deleted")
  @@index([is_primary], map: "idx_images_primary")
  @@index([position], map: "idx_images_position")
}

model field_definitions {
  id              String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  book_type_id    String?           @db.Uuid
  field_name      String            @db.VarChar(100)
  field_label     String?           @db.VarChar(255)
  field_type      String            @db.VarChar(50)
  is_required     Boolean?          @default(false)
  default_value   String?
  display_order   Int?
  created_at      DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?         @default(now()) @db.Timestamptz(6)
  book_type       book_type?        @relation(fields: [book_type_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  item_attributes item_attributes[]
}

model item_attributes {
  id                  String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  item_id             String?            @db.Uuid
  field_definition_id String?            @db.Uuid
  value               String?
  created_at          DateTime?          @default(now()) @db.Timestamptz(6)
  updated_at          DateTime?          @default(now()) @db.Timestamptz(6)
  field_definitions   field_definitions? @relation(fields: [field_definition_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  items               items?             @relation(fields: [item_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([item_id], map: "idx_item_attributes_item_id")
}

model item_incidents {
  id                String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  item_id           String?           @db.Uuid
  incident_type     String?           @db.VarChar(100)
  description       String?
  incident_date     DateTime?         @db.Date
  reported_by       String?           @db.VarChar(255)
  resolution_status String?           @default("open") @db.VarChar(50)
  created_at        DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?         @default(now()) @db.Timestamptz(6)
  items             items?            @relation(fields: [item_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  incident_images   incident_images[]

  @@index([item_id], map: "idx_item_incidents_item_id")
}

model item_locations {
  id               String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  item_id          String?   @db.Uuid
  location_type    String?   @db.VarChar(100)
  location_details String?
  moved_date       DateTime? @db.Date
  created_at       DateTime? @default(now()) @db.Timestamptz(6)
  updated_at       DateTime? @default(now()) @db.Timestamptz(6)
  items            items?    @relation(fields: [item_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([item_id], map: "idx_item_locations_item_id")
}

model item_purchases {
  id             String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  item_id        String?   @db.Uuid
  seller_id      String?   @db.Uuid
  purchase_price Decimal?  @db.Decimal(10, 2)
  purchase_date  DateTime? @db.Date
  payment_method String?   @db.VarChar(100)
  notes          String?
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  updated_at     DateTime? @default(now()) @db.Timestamptz(6)
  items          items?    @relation(fields: [item_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  person         person?   @relation(fields: [seller_id], references: [id], onUpdate: NoAction)

  @@index([item_id], map: "idx_item_purchases_item_id")
}

model item_sales {
  id             String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  item_id        String?   @db.Uuid
  client_id      String?   @db.Uuid
  sale_price     Decimal?  @db.Decimal(10, 2)
  sale_date      DateTime? @db.Date
  sale_location  String?   @db.VarChar(255)
  payment_method String?   @db.VarChar(100)
  invoice_id     String?   @db.Uuid
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  updated_at     DateTime? @default(now()) @db.Timestamptz(6)
  person         person?   @relation(fields: [client_id], references: [id], onUpdate: NoAction)
  items          items?    @relation(fields: [item_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  invoice        invoices? @relation(fields: [invoice_id], references: [id], onUpdate: NoAction)

  @@index([item_id], map: "idx_item_sales_item_id")
  @@index([invoice_id], map: "idx_item_sales_invoice_id")
}

model items {
  id              String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  book_id         String?           @db.Uuid
  item_number     String?           @db.VarChar(100)
  description     String?
  category_id     String?           @db.Uuid
  color           String?           @db.VarChar(50)
  grade           String?           @db.VarChar(50)
  created_at      DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?         @default(now()) @db.Timestamptz(6)
  item_attributes item_attributes[]
  item_incidents  item_incidents[]
  item_locations  item_locations[]
  item_purchases  item_purchases[]
  item_sales      item_sales[]
  // Legacy tables - to be migrated to centralized system
  item_images     item_images[]
  item_documents  item_documents[]
  book            book?             @relation(fields: [book_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  category        category?         @relation(fields: [category_id], references: [id], onUpdate: NoAction)

  @@index([book_id], map: "idx_items_book_id")
  @@index([category_id], map: "idx_items_category_id")
}

model notifications {
  id                   String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  message              String
  type                 NotificationType   @default(GENERAL)
  notification_user_id String?            @db.Uuid
  user_read            Boolean?           @default(false)
  is_targeted          Boolean            @default(false)
  created_at           DateTime?          @default(now()) @db.Timestamptz(6)
  updated_at           DateTime?          @default(now()) @db.Timestamptz(6)
  users                users?             @relation(fields: [notification_user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([notification_user_id], map: "idx_notifications_user_id")
}

model person {
  id             String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  person_type_id String?          @db.Uuid
  user_id        String?          @db.Uuid
  name           String           @db.VarChar(255)
  lastname       String?          @db.VarChar(255)
  address_line_1 String?          @db.VarChar(255)
  address_line_2 String?          @db.VarChar(255)
  zipcode        String?          @db.VarChar(20)
  country        String?          @db.VarChar(100)
  phone          String?          @db.VarChar(50)
  website        String?          @db.VarChar(255)
  specialization String?          @db.VarChar(255)
  created_at     DateTime?        @default(now()) @db.Timestamptz(6)
  updated_at     DateTime?        @default(now()) @db.Timestamptz(6)
  item_purchases item_purchases[]
  item_sales     item_sales[]
  invoices       invoices[]
  person_type    person_type?     @relation(fields: [person_type_id], references: [id], onDelete: Restrict, onUpdate: NoAction)
  users          users?           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([person_type_id], map: "idx_person_person_type_id")
  @@index([user_id], map: "idx_person_user_id")
}

model person_type {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name       String    @db.VarChar(100)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  person     person[]
}

model users {
  id               String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email            String             @unique @db.VarChar(255)
  username         String             @unique @db.VarChar(100)
  name             String?            @db.VarChar(255)
  pass             String             @db.VarChar(255)
  created_at       DateTime?          @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?          @default(now()) @db.Timestamptz(6)
  book             book[]
  book_export      book_export[]
  category         category[]
  invoices         invoices[]
  costs            costs[]
  costs_event_type costs_event_type[]
  notifications    notifications[]
  person           person[]
  subscriptions    subscriptions[]

  @@index([email], map: "idx_users_email")
  @@index([username], map: "idx_users_username")
}

model subscriptions {
  id                     String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id                String    @db.Uuid
  stripe_subscription_id String    @unique @db.VarChar(255)
  stripe_customer_id     String    @db.VarChar(255)
  status                 String    @db.VarChar(50)
  current_period_start   DateTime  @db.Timestamptz(6)
  current_period_end     DateTime  @db.Timestamptz(6)
  cancel_at              DateTime? @db.Timestamptz(6)
  canceled_at            DateTime? @db.Timestamptz(6)
  created_at             DateTime? @default(now()) @db.Timestamptz(6)
  updated_at             DateTime? @default(now()) @db.Timestamptz(6)
  users                  users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id], map: "idx_subscriptions_user_id")
  @@index([stripe_customer_id], map: "idx_subscriptions_stripe_customer_id")
  @@index([status], map: "idx_subscriptions_status")
}

// LEGACY TABLE - TO BE MIGRATED TO CENTRALIZED images TABLE
// This table should be migrated to use the new centralized images table with entity_type = "item"
model item_images {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  item_id    String    @db.Uuid
  url        String    @db.VarChar(500)
  file_path  String    @db.VarChar(500)
  file_name  String    @db.VarChar(255)
  file_size  Int?
  mime_type  String?   @db.VarChar(100)
  is_primary Boolean?  @default(false)
  position   Int?      @default(0)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  items      items     @relation(fields: [item_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([item_id], map: "idx_item_images_item_id")
}

// LEGACY TABLE - TO BE MIGRATED TO CENTRALIZED documents TABLE
// This table should be migrated to use the new centralized documents table with entity_type = "item"
model item_documents {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  item_id    String    @db.Uuid
  url        String    @db.VarChar(500)
  file_path  String    @db.VarChar(500)
  file_name  String    @db.VarChar(255)
  file_size  Int?
  mime_type  String?   @db.VarChar(100)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  items      items     @relation(fields: [item_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([item_id], map: "idx_item_documents_item_id")
}

// LEGACY TABLE - TO BE MIGRATED TO CENTRALIZED images TABLE
// This table should be migrated to use the new centralized images table with entity_type = "incident"
model incident_images {
  id             String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  incident_id    String         @db.Uuid
  url            String         @db.VarChar(500)
  file_path      String         @db.VarChar(500)
  file_name      String         @db.VarChar(255)
  file_size      Int?
  mime_type      String?        @db.VarChar(100)
  created_at     DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at     DateTime?      @default(now()) @db.Timestamptz(6)
  item_incidents item_incidents @relation(fields: [incident_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([incident_id], map: "idx_incident_images_incident_id")
}

model invoices {
  id               String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id          String       @db.Uuid
  book_id          String       @db.Uuid
  invoice_number   String       @db.VarChar(100)
  client_id        String?      @db.Uuid
  invoice_date     DateTime     @default(now()) @db.Date
  total_amount     Decimal      @db.Decimal(10, 2)
  currency         String       @default("EUR") @db.VarChar(3)
  status           String       @default("paid") @db.VarChar(50)
  notes            String?      @db.Text
  created_at       DateTime?    @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?    @default(now()) @db.Timestamptz(6)
  
  // Relations
  user             users        @relation(fields: [user_id], references: [id], onUpdate: NoAction)
  book             book         @relation(fields: [book_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  client           person?      @relation(fields: [client_id], references: [id], onUpdate: NoAction)
  item_sales       item_sales[]

  @@index([user_id], map: "idx_invoices_user_id")
  @@index([book_id], map: "idx_invoices_book_id")
  @@index([client_id], map: "idx_invoices_client_id")
  @@unique([book_id, invoice_number], map: "idx_unique_invoice_number_per_book")
}
